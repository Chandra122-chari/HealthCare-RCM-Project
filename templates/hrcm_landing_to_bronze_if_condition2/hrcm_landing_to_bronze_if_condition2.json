{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AzureDatabricksDeltaLake1": {
			"type": "string"
		},
		"emr_ddl_creation_ls": {
			"type": "string"
		},
		"emr_ddl_ls": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/hrcm_landing_to_bronze_if_condition2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition2",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.loadtype,'Full')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "fetch_logs",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "@concat('select coalesce(cast(max(load_date) as date), ''1900-01-01'') as last_fetched_date from `hrcm-data-catalog`.audit.audit_log where data_source = ''', pipeline().parameters.datasource, ''' and table_name = ''', pipeline().parameters.tablename, '''')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "audit_DeltaLakeDataset",
											"type": "DatasetReference"
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "incremental",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "fetch_logs",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select *,''',pipeline().parameters.datasource,''' as datasource from ',pipeline().parameters.tablename,' where ',pipeline().parameters.watermark,' >= ''',activity('fetch_logs').output.firstRow.last_fetched_date,'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Dynamic_AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"db_name": {
													"value": "@pipeline().parameters.database",
													"type": "Expression"
												},
												"schema": {
													"value": "@split(pipeline().parameters.tablename,'.')[0]",
													"type": "Expression"
												},
												"table": {
													"value": "@split(pipeline().parameters.tablename,'.')[1]",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Dynamic_adlsgen2_parquet",
											"type": "DatasetReference",
											"parameters": {
												"root": "bronze",
												"subroot": {
													"value": "@split(pipeline().parameters.targetpath,'.')[0]",
													"type": "Expression"
												},
												"file": {
													"value": "@split(pipeline().parameters.tablename,'.')[1]",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "insert_incremental_logs",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "incremental",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "@concat('insert into `hrcm-data-catalog`.audit.audit_log(data_source,table_name,numberofrowscopied,watermarkcolumnname,load_date) values(''',pipeline().parameters.datasource,''',''',pipeline().parameters.tablename,''',''',activity('incremental').output.rowscopied,''',''',pipeline().parameters.watermark,''',''',utcNow(),''')')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "audit_DeltaLakeDataset",
											"type": "DatasetReference"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Full_load",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('select *,''',pipeline().parameters.datasource,''' as datasource from ',pipeline().parameters.tablename)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Dynamic_AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"db_name": {
													"value": "@pipeline().parameters.database",
													"type": "Expression"
												},
												"schema": {
													"value": "@split(pipeline().parameters.tablename,'.')[0]",
													"type": "Expression"
												},
												"table": {
													"value": "@split(pipeline().parameters.tablename,'.')[1]",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Dynamic_adlsgen2_parquet",
											"type": "DatasetReference",
											"parameters": {
												"root": "bronze",
												"subroot": {
													"value": "@pipeline().parameters.targetpath",
													"type": "Expression"
												},
												"file": {
													"value": "@split(pipeline().parameters.tablename,'.')[1]",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "entry_in_audit",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Full_load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "@concat('insert into `hrcm-data-catalog`.audit.audit_log(data_source,table_name,numberofrowscopied,watermarkcolumnname,load_date) values(''',pipeline().parameters.datasource,''',''',pipeline().parameters.tablename,''',''',activity('Full_load').output.rowscopied,''',''',pipeline().parameters.watermark,''',''',utcNow(),''')')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "audit_DeltaLakeDataset",
											"type": "DatasetReference"
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"parameters": {
					"loadtype": {
						"type": "string"
					},
					"database": {
						"type": "string"
					},
					"tablename": {
						"type": "string"
					},
					"datasource": {
						"type": "string"
					},
					"targetpath": {
						"type": "string"
					},
					"watermark": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-27T10:53:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/audit_DeltaLakeDataset')]",
				"[concat(variables('factoryId'), '/datasets/Dynamic_AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/Dynamic_adlsgen2_parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/audit_DeltaLakeDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('AzureDatabricksDeltaLake1')]",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('emr_ddl_creation_ls')]",
					"type": "LinkedServiceReference",
					"parameters": {
						"db_name": {
							"value": "@dataset().db_name",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"db_name": {
						"type": "string"
					},
					"schema": {
						"type": "string"
					},
					"table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic_adlsgen2_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "[parameters('emr_ddl_ls')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"root": {
						"type": "string"
					},
					"subroot": {
						"type": "string"
					},
					"file": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().file",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().subroot",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().root",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": []
		}
	]
}